#!/usr/bin/env python3
# -*- coding:utf-8 -*-
import pytest
import allure
from utils.logger import log
from common.readconfig import ini
from page_object.LoginPage import Loginpage
from page_object.PchsPage import pchspage
from page_object.StockPage import stockpage
from utils.times import sleep
from page_object.WMSPage import wmspage


@allure.feature("采购管理")
class TestPchsplan:
    @pytest.fixture(scope='function', autouse=True)
    def open_oms(self, drivers):
        """oms2.0,进入采购管理"""
        # LoginPage = Loginpage(drivers)
        # LoginPage.open_url()
        # LoginPage.get_url(ini.url)

    @allure.story("滚动计划")
    @allure.title("滚动计划-添加配件新增滚动计划")
    @pytest.mark.dependency(name="a")
    @pytest.mark.run(order=1)
    def test_001(self, drivers):
        """滚动计划，添加配件"""
        PchsPage = pchspage(drivers)
        LoginPage = Loginpage(drivers)
        LoginPage.input_username("zw1")
        LoginPage.input_password("123456")
        LoginPage.click_loginButton()
        a = LoginPage.get_title()
        log.info(a)
        assert ("极配OMS系统" in a)
        PchsPage.click_pchsguanli()
        PchsPage.click_pchsgundong()
        PchsPage.click_gdadd()
        PchsPage.click_gdselectsp()
        PchsPage.input_gdsupplier("上海测试有限公司2")
        PchsPage.click_gdsearch()
        PchsPage.doubleclick_gdgys()
        PchsPage.click_gdaddsku()
        PchsPage.input_gdsku("04006664")
        PchsPage.click_gdskusearch()
        PchsPage.doubleclick_gdsku()
        PchsPage.input_gdnum("5")
        PchsPage.input_gdprice("10")
        PchsPage.click_gdskusure()
        PchsPage.click_gdskuclose()
        PchsPage.click_gdsave()
        PchsPage.click_gdcommit()
        gdstatus = PchsPage.gdpchs_status()
        gdorderno = PchsPage.gdpchs_orderno()

        assert ('已审批' in gdstatus)
        if '已审批' in gdstatus:
            print('1，滚动计划单' + gdorderno, "已成功提交")
        else:
            print('1.滚动计划单，提交失败', )

    @allure.story("计划采购订单")
    @allure.title("计划采购订单-选择滚动计划并提交")
    @pytest.mark.dependency(depends=['a'])
    @pytest.mark.dependency(name="a")
    @pytest.mark.run(order=2)
    def test_002(self, drivers):
        """计划采购订单，新增，选择滚动计划并提交"""
        PchsPage = pchspage(drivers)
        StockPage = stockpage(drivers)
        LoginPage = Loginpage(drivers)
        a = LoginPage.login_name()
        if a != "测试公司（总部）":
            LoginPage.mouse_stop1()
            LoginPage.click_loginOut()
            LoginPage.input_username("zw1")
            LoginPage.input_password("123456")
            LoginPage.click_loginButton()
            a = LoginPage.get_title()
            log.info(a)
            assert ("极配OMS系统" in a)
            PchsPage.click_pchsguanli()
            PchsPage.click_pchsgundong()
            gdorderno = PchsPage.gdpchs_orderno()
            PchsPage.click_pchsplan()
            PchsPage.click_planadd()
            PchsPage.click_planselectsp()
            PchsPage.input_plansupplier1("上海测试有限公司2")
            PchsPage.click_plansearch1()
            PchsPage.doubleclick_plangys1()
            PchsPage.click_planaddsku()
            PchsPage.input_plansku(gdorderno)
            PchsPage.click_planskusearch()
            PchsPage.click_planselectgd1()
            PchsPage.click_planselect()
            # PchsPage.click_planskuNum()
            # PchsPage.input_planskuNum('4')
            PchsPage.click_plansave()
            # 检查在途库存
            StockPage.click_stcok()
            StockPage.click_stcoksearch()
            StockPage.input_stockpartid('04006664')
            StockPage.click_stcokzero()
            StockPage.click_stcoksearch1()
            OnRoadQty = StockPage.stock_onRoadQty()
            PchsPage.click_pchsplan()
            PchsPage.click_plancommit()
            PchsPage.click_plancommitsure()
            planStatus = PchsPage.planpchs_status()
            planOrderNo = PchsPage.planpchs_orderno()
            StockPage.click_stcoksearch()
            StockPage.click_stcoksearch1()
            OnRoadQty1 = StockPage.stock_onRoadQty()
            roadQty = int(OnRoadQty1) - int(OnRoadQty)
            assert ('待收货' in planStatus and roadQty == 5)
            if '待收货' in planStatus:

                print('1，计划采购订单' + planOrderNo, "已成功提交")
            else:
                print('1.计划采购订单，提交失败', )
        else:
            # PchsPage.click_pchsguanli()
            PchsPage.click_pchsgundong()
            gdorderno = PchsPage.gdpchs_orderno()
            PchsPage.click_pchsplan()
            PchsPage.click_planadd()
            PchsPage.click_planselectsp()
            PchsPage.input_plansupplier("上海测试有限公司2")
            PchsPage.click_plansearch()
            PchsPage.doubleclick_plangys()
            PchsPage.click_planaddsku()
            PchsPage.input_plansku(gdorderno)
            PchsPage.click_planskusearch()
            PchsPage.click_planselectgd()
            PchsPage.click_planselect()
            # PchsPage.click_planskuNum()
            # PchsPage.input_planskuNum('4')
            PchsPage.click_plansave()
            # 检查在途库存
            StockPage.click_stcok()
            StockPage.click_stcoksearch()
            StockPage.input_stockpartid('04006664')
            StockPage.click_stcokzero()
            StockPage.click_stcoksearch1()
            OnRoadQty = StockPage.stock_onRoadQty()
            PchsPage.click_pchsplan()
            PchsPage.click_plancommit()
            PchsPage.click_plancommitsure()
            planStatus = PchsPage.planpchs_status()
            planOrderNo = PchsPage.planpchs_orderno()
            StockPage.click_stcoksearch()
            StockPage.click_stcoksearch1()
            OnRoadQty1 = StockPage.stock_onRoadQty()
            roadQty = int(OnRoadQty1) - int(OnRoadQty)
            print(roadQty)
            assert ('待收货' in planStatus and roadQty == 5)
            if '待收货' in planStatus:
                print('1，计划采购订单' + planOrderNo, "已成功提交")
            else:
                print('1.计划采购订单，提交失败', )

    @allure.story("计划采购订单")
    @allure.title("计划采购订单-WMS入库")
    @pytest.mark.dependency(depends=['b'])
    @pytest.mark.run(order=3)
    def test_003(self, drivers):
        """计划采购订单，WMS入库并回传oms"""
        PchsPage = pchspage(drivers)
        StockPage = stockpage(drivers)
        WMSPage = wmspage(drivers)
        PchsPage.click_pchsplan()
        planOrderNo = PchsPage.planpchs_orderno()
        StockPage.open_newPage(ini.wms_url)
        WMSPage.input_username("zw1")
        WMSPage.input_password("123456")
        WMSPage.click_loginButton()
        WMSPage.click_system()
        WMSPage.click_systemSet()
        WMSPage.click_systemStore()
        WMSPage.click_systemDefaultStore()
        WMSPage.click_enterManager()
        WMSPage.click_enterTask()
        WMSPage.click_select()
        WMSPage.click_yewuNo()
        WMSPage.input_yewuNo(planOrderNo)
        WMSPage.click_enterTaskSearch()
        WMSPage.click_selectEnterNo()
        WMSPage.click_BatchReceiving()
        enterNo = WMSPage.obtain_enterNo()
        WMSPage.click_receivingManager()
        WMSPage.click_receivingSelectNo()
        WMSPage.click_confirmArrival()
        WMSPage.click_confirmArrivalSure()
        WMSPage.click_receivingNo()
        WMSPage.click_receivingOneKey()
        WMSPage.click_receivingSure()
        WMSPage.click_receivingOver()
        WMSPage.click_receivingSure1()
        WMSPage.click_shangjiaOrder()
        WMSPage.click_shangjiaManager()
        WMSPage.skip_first()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        stock_qty_before = StockPage.stock_qty()
        stock_outQty_before = StockPage.stock_outQty()
        stock_OnRoadQty_before = StockPage.stock_onRoadQty()
        WMSPage.skip_second()
        WMSPage.click_shangjiaNo()
        WMSPage.click_shangjiaOver()
        WMSPage.click_shangjiaOverSure()
        WMSPage.click_enterTask()
        ruku_status = WMSPage.ruku_status()
        WMSPage.skip_first()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        stock_qty_after = StockPage.stock_qty()
        stock_outQty_after = StockPage.stock_outQty()
        stock_OnRoadQty_after = StockPage.stock_onRoadQty()
        PchsPage.click_pchsplan()
        PchsPage.click_planMore()
        PchsPage.input_planOrder(planOrderNo)
        PchsPage.click_moreSure()
        planStatus = PchsPage.planpchs_status()
        qty = int(stock_qty_after) - int(stock_qty_before)
        outQty = int(stock_outQty_after) - int(stock_outQty_before)
        OnRoadQty = int(stock_OnRoadQty_before) - int(stock_OnRoadQty_after)
        assert ('全部入库' in planStatus and qty == 5 and outQty == 5 and OnRoadQty == 5)
        if '全部入库' in planStatus:
            print('1，计划采购订单' + planOrderNo, "wms回传成功，状态为" + planStatus )
        else:
            print('1.计划采购订单，回传失败', )

    @allure.story("临时采购订单")
    @allure.title("临时采购订单-添加配件并提交")
    @pytest.mark.run(order=4)
    def test_004(self, drivers):
        """添加配件并提交"""
        PchsPage = pchspage(drivers)
        StockPage = stockpage(drivers)
        PchsPage.click_pchsls()
        PchsPage.click_lsAdd()
        PchsPage.click_lsselectsp()
        PchsPage.input_lssupplier("上海测试有限公司2")
        PchsPage.click_lssearch()
        PchsPage.doubleclick_lsgys()
        PchsPage.click_lswaaddsku()
        PchsPage.input_lssku("04000220")
        PchsPage.click_lsskusearch()
        PchsPage.doubleclick_lssku()
        PchsPage.input_lsnum("5")
        PchsPage.input_lsprice("10")
        PchsPage.click_lsskusure()
        PchsPage.click_lsskuclose()
        PchsPage.click_lssave()
        StockPage.click_stcoksearch()
        StockPage.input_stockpartid('04000220')
        StockPage.click_stcoksearch1()
        OnRoadQty_before = StockPage.stock_onRoadQty()
        PchsPage.click_pchsls()
        PchsPage.click_lscommit()
        PchsPage.click_lscommitsure()
        lspchs_status = PchsPage.lspchs_status()
        lspchs_orderno = PchsPage.lspchs_orderno()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        OnRoadQty_after = StockPage.stock_onRoadQty()
        OnRoadQty = int(OnRoadQty_after) - int(OnRoadQty_before)
        assert ('待收货' in lspchs_status and OnRoadQty == 5)
        if '待收货' in lspchs_status:
            print('1，临时采购订单' + lspchs_orderno, "已成功提交")
        else:
            print('1.临时采购订单，提交失败', )

    @allure.story("临时采购订单")
    @allure.title("临时采购订单-WMS入库")
    @pytest.mark.run(order=5)
    def test_005(self, drivers):
        """临时采购订单，WMS入库并回传oms"""
        PchsPage = pchspage(drivers)
        StockPage = stockpage(drivers)
        WMSPage = wmspage(drivers)
        PchsPage.click_pchsls()
        lspchs_orderno = PchsPage.lspchs_orderno()
        # lspchs_checkNum_before = PchsPage.lspchs_checkNum()
        PchsPage.skip_second()
        WMSPage.input_yewuNo(lspchs_orderno)
        WMSPage.click_enterTaskSearch()
        WMSPage.click_selectEnterNo()
        WMSPage.click_BatchReceiving()
        enterNo = WMSPage.obtain_enterNo()
        WMSPage.click_receivingManager()
        WMSPage.click_receivingSelectNo()
        WMSPage.click_confirmArrival()
        WMSPage.click_confirmArrivalSure()
        WMSPage.click_receivingNo()
        WMSPage.click_receivingDetail()
        WMSPage.click_receivingDetailNum()
        WMSPage.input_receivingDetailNum("4")
        WMSPage.click_receivingDetailSure()
        WMSPage.click_receivingOver()
        WMSPage.click_receivingchayiSure()
        WMSPage.click_shangjiaOrder()
        WMSPage.click_shangjiaManager()
        WMSPage.skip_first()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        stock_qty_before = StockPage.stock_qty()
        stock_outQty_before = StockPage.stock_outQty()
        stock_OnRoadQty_before = StockPage.stock_onRoadQty()
        WMSPage.skip_second()
        WMSPage.click_shangjiaNo()
        WMSPage.click_shangjiaOver()
        WMSPage.click_shangjiaOverSure()
        WMSPage.click_enterTask()
        ruku_status = WMSPage.ruku_status()
        WMSPage.skip_first()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        stock_qty_after = StockPage.stock_qty()
        stock_outQty_after = StockPage.stock_outQty()
        stock_OnRoadQty_after = StockPage.stock_onRoadQty()
        PchsPage.click_pchsls()
        PchsPage.click_lsMore()
        PchsPage.input_lsOrder(lspchs_orderno)
        PchsPage.click_lsSure()
        lspchs_status = PchsPage.lspchs_status()
        qty = int(stock_qty_after) - int(stock_qty_before)
        outQty = int(stock_outQty_after) - int(stock_outQty_before)
        OnRoadQty = int(stock_OnRoadQty_before) - int(stock_OnRoadQty_after)
        assert ('部分入库' in lspchs_status and qty == 4 and outQty == 4 and OnRoadQty == 4)
        if '部分入库' in lspchs_status:
            print('1，临时采购订单' + lspchs_orderno, "wms回传成功，状态为" + lspchs_status)
        else:
            print('1.临时采购订单，回传失败', )

    @allure.story("临时采购订单")
    @allure.title("临时采购订单-WMS确认差异")
    @pytest.mark.run(order=6)
    def test_006(self, drivers):
        """临时采购订单，WMS入库确认差异"""
        PchsPage = pchspage(drivers)
        StockPage = stockpage(drivers)
        WMSPage = wmspage(drivers)
        StockPage.click_stcoksearch()
        stock_OnRoadQty_before = StockPage.stock_onRoadQty()
        PchsPage.click_pchsls()
        lspchs_orderno = PchsPage.lspchs_orderno()
        lspchs_cancelNum_before = PchsPage.lspchs_cancelNum()
        WMSPage.skip_second()
        WMSPage.click_receivingManager()
        receiving_no = WMSPage.receiving_no()
        WMSPage.click_receivingDifference()
        WMSPage.input_receivingOn(receiving_no)
        WMSPage.click_receivingSearch()
        WMSPage.click_difference()
        WMSPage.click_differenceSure()
        WMSPage.skip_first()
        PchsPage.click_lsMore()
        PchsPage.click_lsSure()
        lspchs_status = PchsPage.lspchs_status()
        lspchs_cancelNum_after = PchsPage.lspchs_cancelNum()
        StockPage.click_stcoksearch()
        StockPage.click_stcoksearch1()
        stock_OnRoadQty_after = StockPage.stock_onRoadQty()
        cancelNum = int(lspchs_cancelNum_after) - int(lspchs_cancelNum_before)
        OnRoadQty = int(stock_OnRoadQty_before) - int(stock_OnRoadQty_after)
        assert ('全部入库' in lspchs_status and cancelNum == 1 and OnRoadQty == 1)
        if '全部入库' in lspchs_status:
            print('1，临时采购订单' + lspchs_orderno, "wms确认差异成功" + lspchs_status)
        else:
            print('1.临时采购订单，WMS确认差异失败', )


if __name__ == '__main__':
    import os

    pytest.main(['TestCase/test_pchsplan.py', '--alluredir', './allure'])
    os.system('allure serve allure')
